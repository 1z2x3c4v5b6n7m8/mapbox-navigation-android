// Signature format: 3.0
package com.mapbox.navigation.ui.base {

  public interface MapboxState {
  }

  public interface MapboxView<S extends com.mapbox.navigation.ui.base.MapboxState> {
    method public void render(S state);
  }

}

package com.mapbox.navigation.ui.base.api.signboard {

  public interface SignboardApi {
    method public void cancelAll();
    method public void generateSignboard(com.mapbox.api.directions.v5.models.BannerInstructions instructions, com.mapbox.navigation.ui.base.api.signboard.SignboardReadyCallback callback);
  }

  public interface SignboardReadyCallback {
    method public void onFailure(com.mapbox.navigation.ui.base.model.signboard.SignboardState.SignboardFailure error);
    method public void onSignboardReady(com.mapbox.navigation.ui.base.model.signboard.SignboardState.SignboardReady bytes);
  }

}

package com.mapbox.navigation.ui.base.api.snapshotter {

  public interface SnapshotReadyCallback {
    method public void onFailure(com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure error);
    method public void onSnapshotReady(com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotReady bitmap);
  }

  public interface SnapshotterApi {
    method public void cancel();
    method public void generateSnapshot(com.mapbox.navigation.base.trip.model.RouteProgress progress, com.mapbox.navigation.ui.base.api.snapshotter.SnapshotReadyCallback callback);
  }

}

package com.mapbox.navigation.ui.base.model.signboard {

  public abstract sealed class SignboardState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public abstract static sealed class SignboardState.SignboardFailure extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
  }

  public static final class SignboardState.SignboardFailure.SignboardError extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.SignboardFailure {
    ctor public SignboardState.SignboardFailure.SignboardError(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.signboard.SignboardState.SignboardFailure.SignboardError copy(String? exception);
    method public String? getException();
  }

  public static final class SignboardState.SignboardFailure.SignboardUnavailable extends com.mapbox.navigation.ui.base.model.signboard.SignboardState.SignboardFailure {
    field public static final com.mapbox.navigation.ui.base.model.signboard.SignboardState.SignboardFailure.SignboardUnavailable! INSTANCE;
  }

  public static final class SignboardState.SignboardReady extends com.mapbox.navigation.ui.base.model.signboard.SignboardState {
    ctor public SignboardState.SignboardReady(byte[] bytes);
    method public byte[] component1();
    method public com.mapbox.navigation.ui.base.model.signboard.SignboardState.SignboardReady copy(byte[] bytes);
    method public byte[] getBytes();
  }

}

package com.mapbox.navigation.ui.base.model.snapshotter {

  public abstract sealed class SnapshotState implements com.mapbox.navigation.ui.base.MapboxState {
  }

  public abstract static sealed class SnapshotState.SnapshotFailure extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState {
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotEmpty extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    ctor public SnapshotState.SnapshotFailure.SnapshotEmpty(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotEmpty copy(String? exception);
    method public String? getException();
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotError extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    ctor public SnapshotState.SnapshotFailure.SnapshotError(String? exception);
    method public String? component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotError copy(String? exception);
    method public String? getException();
  }

  public static final class SnapshotState.SnapshotFailure.SnapshotUnavailable extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure {
    field public static final com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotFailure.SnapshotUnavailable! INSTANCE;
  }

  public static final class SnapshotState.SnapshotReady extends com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState {
    ctor public SnapshotState.SnapshotReady(android.graphics.Bitmap bitmap);
    method public android.graphics.Bitmap component1();
    method public com.mapbox.navigation.ui.base.model.snapshotter.SnapshotState.SnapshotReady copy(android.graphics.Bitmap bitmap);
    method public android.graphics.Bitmap getBitmap();
  }

}

package com.mapbox.navigation.ui.base.util {

  @java.lang.FunctionalInterface public interface MapboxNavigationConsumer<T> {
    method public default void accept(T? t);
  }

}

